[{"/home/eduardo/code/php/laravel-typescript/frontend/src/App.tsx":"1","/home/eduardo/code/php/laravel-typescript/frontend/src/index.tsx":"2","/home/eduardo/code/php/laravel-typescript/frontend/src/pages/login/Login.tsx":"3","/home/eduardo/code/php/laravel-typescript/frontend/src/components/input/Input.tsx":"4","/home/eduardo/code/php/laravel-typescript/frontend/src/pages/transactions/Transactions.tsx":"5","/home/eduardo/code/php/laravel-typescript/frontend/src/pages/addTransaction/AddTransaction.tsx":"6","/home/eduardo/code/php/laravel-typescript/frontend/src/pages/transaction/Transaction.tsx":"7","/home/eduardo/code/php/laravel-typescript/frontend/src/routes/index.tsx":"8","/home/eduardo/code/php/laravel-typescript/frontend/src/services/api.ts":"9","/home/eduardo/code/php/laravel-typescript/frontend/src/utils/formatValue.ts":"10","/home/eduardo/code/php/laravel-typescript/frontend/src/pages/transactionEdit/TransactionEdit.tsx":"11"},{"size":254,"mtime":1610000582068,"results":"12","hashOfConfig":"13"},{"size":227,"mtime":1609310432961,"results":"14","hashOfConfig":"13"},{"size":608,"mtime":1609369779594,"results":"15","hashOfConfig":"13"},{"size":827,"mtime":1609367069957,"results":"16","hashOfConfig":"13"},{"size":2398,"mtime":1610124599346,"results":"17","hashOfConfig":"13"},{"size":2828,"mtime":1610107556975,"results":"18","hashOfConfig":"13"},{"size":1614,"mtime":1610124715566,"results":"19","hashOfConfig":"13"},{"size":750,"mtime":1610119790210,"results":"20","hashOfConfig":"13"},{"size":120,"mtime":1610037253763,"results":"21","hashOfConfig":"13"},{"size":169,"mtime":1610037149022,"results":"22","hashOfConfig":"13"},{"size":3914,"mtime":1610124752215,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1leox03",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/eduardo/code/php/laravel-typescript/frontend/src/App.tsx",[],"/home/eduardo/code/php/laravel-typescript/frontend/src/index.tsx",[],"/home/eduardo/code/php/laravel-typescript/frontend/src/pages/login/Login.tsx",["48","49","50"],"/home/eduardo/code/php/laravel-typescript/frontend/src/components/input/Input.tsx",["51"],"/home/eduardo/code/php/laravel-typescript/frontend/src/pages/transactions/Transactions.tsx",[],"/home/eduardo/code/php/laravel-typescript/frontend/src/pages/addTransaction/AddTransaction.tsx",["52"],"import React, { FormEvent, useState } from 'react';\nimport { useHistory, Link } from 'react-router-dom';\nimport { FiChevronLeft } from 'react-icons/fi';\nimport api from '../../services/api';\n\nimport './addTransaction.scss';\n\nexport const AddTransaction: React.FC = () => {\n  const history = useHistory();\n  const [value, setValue] = useState('');\n  const [status, setStatus] = useState('');\n  const [date, setDate] = useState('');\n  const [time, setTime] = useState('');\n  const [inputError, setInputError] = useState('');\n\n  async function handleAddTransaction(e: FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    if (!value || !status || !date || !time) {\n      setInputError('Complete todos os campos');\n      return;\n    }\n\n    try {\n      const transaction = { value, status, date, time };\n      const response = await api.post('/transaction', {\n        value: transaction.value,\n        status: transaction.status,\n        date: transaction.date,\n        time: transaction.time,\n      });\n      console.log(response);\n      setInputError('');\n      history.push('/');\n    } catch (err) {\n      setInputError('Erro ao adicionar a transação');\n    }\n  }\n\n  return (\n    <div className=\"add-transaction-page\">\n      <div className=\"header\">\n        <h1 className=\"add-transaction\">Adicione os dados da sua transação</h1>\n        <Link to=\"/\">\n          <FiChevronLeft size={16} />\n          Voltar\n        </Link>\n      </div>\n      <form onSubmit={handleAddTransaction}>\n        {inputError && <span className=\"error\">{inputError}</span>}\n        <input\n          type=\"text\"\n          name=\"value\"\n          id=\"value\"\n          placeholder=\"Digite o valor da sua transação\"\n          onChange={e => setValue(e.target.value)}\n          className=\"value\"\n        />\n        <div className=\"seletores\">\n          <div>\n            <select\n              name=\"status\"\n              id=\"status\"\n              onChange={e => setStatus(e.target.value)}\n              className=\"selecao\"\n            >\n              <option disabled selected defaultValue=\"0\">\n                Status\n              </option>\n              <option value=\"Em processamento\">Em processamento</option>\n              <option value=\"Aprovado\">Aprovado</option>\n            </select>\n          </div>\n          <div className=\"selecao\">\n            <input\n              type=\"date\"\n              name=\"date\"\n              id=\"date\"\n              onChange={e => setDate(e.target.value)}\n            />\n          </div>\n          <div className=\"selecao\">\n            <input\n              type=\"time\"\n              name=\"time\"\n              id=\"time\"\n              onChange={e => setTime(e.target.value)}\n            />\n          </div>\n        </div>\n        <button type=\"submit\">Salvar transação</button>\n      </form>\n    </div>\n  );\n};\n","/home/eduardo/code/php/laravel-typescript/frontend/src/pages/transaction/Transaction.tsx",["53"],"import React, { useEffect, useState } from 'react';\nimport { FiChevronLeft } from 'react-icons/fi';\nimport { Link, useParams } from 'react-router-dom';\n\nimport api from '../../services/api';\n\nimport './transaction.scss';\n\ninterface ParamsTypes {\n  id: string;\n}\n\ninterface Transaction {\n  id: number;\n  value: number;\n  status: 'Aprovado' | 'Em processamento';\n  date: Date;\n  time: string;\n  cpf: string;\n  image: string;\n  created_at: Date;\n}\n\nexport const Transaction: React.FC = () => {\n  const { id } = useParams<ParamsTypes>();\n  const [transaction, setTransaction] = useState<Transaction>();\n\n  useEffect(() => {\n    async function loadTransactions(): Promise<void> {\n      const response = await api.get(`/transaction/${id}`);\n\n      setTransaction(response.data);\n    }\n    loadTransactions();\n  });\n\n  return (\n    <div className=\"transaction-page\">\n      <div className=\"header\">\n        <h1 className=\"title\">Detralhes da transação</h1>\n        <Link to=\"/\">\n          <FiChevronLeft size={16} />\n          Voltar\n        </Link>\n      </div>\n      <div className=\"details\">\n        <ul className=\"transaction\">\n          {transaction && (\n            <div className=\"info\">\n              <li>Valor: R$ {transaction.value}</li>\n              <li>Status: {transaction.status}</li>\n              <li>Data: {transaction.date}</li>\n              <li>Hora: {transaction.time}</li>\n              {transaction.cpf && <li>CPF: {transaction.cpf}</li>}\n              {transaction.image && <li>Comprovante: {transaction.image}</li>}\n            </div>\n          )}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","/home/eduardo/code/php/laravel-typescript/frontend/src/routes/index.tsx",[],"/home/eduardo/code/php/laravel-typescript/frontend/src/services/api.ts",[],"/home/eduardo/code/php/laravel-typescript/frontend/src/utils/formatValue.ts",[],"/home/eduardo/code/php/laravel-typescript/frontend/src/pages/transactionEdit/TransactionEdit.tsx",[],{"ruleId":"54","severity":1,"message":"55","line":3,"column":13,"nodeType":"56","messageId":"57","endLine":3,"endColumn":16},{"ruleId":"58","severity":1,"message":"59","line":10,"column":31,"nodeType":"60","messageId":"61","endLine":10,"endColumn":34,"suggestions":"62"},{"ruleId":"63","severity":1,"message":"64","line":11,"column":5,"nodeType":"65","messageId":"66","endLine":11,"endColumn":16},{"ruleId":"54","severity":1,"message":"67","line":14,"column":36,"nodeType":"56","messageId":"57","endLine":14,"endColumn":41},{"ruleId":"63","severity":1,"message":"64","line":31,"column":7,"nodeType":"65","messageId":"66","endLine":31,"endColumn":18},{"ruleId":"54","severity":1,"message":"68","line":26,"column":50,"nodeType":"56","messageId":"57","endLine":26,"endColumn":61},"@typescript-eslint/no-unused-vars","'Yup' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["69","70"],"no-console","Unexpected console statement.","MemberExpression","unexpected","'error' is assigned a value but never used.","'Transaction' is assigned a value but never used.",{"messageId":"71","fix":"72","desc":"73"},{"messageId":"74","fix":"75","desc":"76"},"suggestUnknown",{"range":"77","text":"78"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"77","text":"79"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[236,239],"unknown","never"]